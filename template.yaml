Description: VPC for On-AWS deployment.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Optional tags. The metadata that you apply to the resources.
        Parameters:
          - App
          - Owner

Parameters:
  App:
    Type: String

  Owner:
    Type: String

  AvailabilityZonesCount:
    Description: Number of availability zones to span.
    Default: 2
    Type: Number
    AllowedValues: [ 1, 2, 3 ]

Conditions:
  SecondZone:
    Fn::Or:
      - Fn::Equals: [!Ref AvailabilityZonesCount, 2]
      - Fn::Equals: [!Ref AvailabilityZonesCount, 3]
  ThirdZone:
    Fn::Equals: [!Ref AvailabilityZonesCount, 3]
  AssignApp:
    Fn::Not:
      - Fn::Equals: [ !Ref App, "" ]
  AssignOwner:
    Fn::Not:
      - Fn::Equals: [ !Ref Owner, "" ]

Mappings:
  Configuration:
    us-east-1:
      Ami: ami-0c09e99c7d9bb3ec3
    ca-central-1:
      Ami: ami-0263e201b916f6cad
    eu-west-1:
      Ami: ami-03581a4bc9c44cdd3
    Spot:
      MaxPrice: 0.003
    CidrBlock:
      VPC: 10.192.0.0/16
      PublicSubnetA: 10.192.0.0/20
      PublicSubnetB: 10.192.16.0/20
      PublicSubnetC: 10.192.32.0/20
      PrivateSubnetA: 10.192.48.0/20
      PrivateSubnetB: 10.192.64.0/20
      PrivateSubnetC: 10.192.80.0/20
    Logs:
      RetentionInDays: 30

Resources:
  ##########################################################################################
  # VPC
  ##########################################################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [Configuration, CidrBlock, VPC]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignApp
          - Key: Name
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  ##########################################################################################
  # Public Subnets
  ##########################################################################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignApp
          - Key: Name
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PublicSubnetA]
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: PublicSubnetA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: SecondZone
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PublicSubnetB]
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: PublicSubnetB

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: ThirdZone
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PublicSubnetC]
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: PublicSubnetC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: Public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: SecondZone
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: ThirdZone
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  ########################################################################################
  # Private Subnets
  ########################################################################################
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PrivateSubnetA]
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: PrivateSubnetA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: SecondZone
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PrivateSubnetB]
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: PrivateSubnetB

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: ThirdZone
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PrivateSubnetC]
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: PrivateSubnetC

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: PrivateA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Condition: SecondZone
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: PrivateB

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Condition: ThirdZone
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: PrivateC

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: SecondZone
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: ThirdZone
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC

  ################################################################################
  # VPC Flow Logs
  ################################################################################
  LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-vpc-flow-log
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  LogGroupPublicAccept:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /on-aws/vpc/log/${VPC}/public/accept
      RetentionInDays: !FindInMap [Configuration, Logs, RetentionInDays]

  LogGroupPublicReject:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /on-aws/vpc/log/${VPC}/public/reject
      RetentionInDays: !FindInMap [Configuration, Logs, RetentionInDays]

  LogGroupPrivateAccept:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /on-aws/vpc/log/${VPC}/private/accept
      RetentionInDays: !FindInMap [Configuration, Logs, RetentionInDays]

  LogGroupPrivateReject:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /on-aws/vpc/log/${VPC}/private/reject
      RetentionInDays: !FindInMap [Configuration, Logs, RetentionInDays]

  PublicSubnetAFlowLogAccept:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt LogRole.Arn
      LogGroupName: !Ref LogGroupPublicAccept
      ResourceId: !Ref PublicSubnetA
      ResourceType: Subnet
      TrafficType: ACCEPT
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  PublicSubnetBFlowLogAccept:
    Type: AWS::EC2::FlowLog
    Condition: SecondZone
    Properties:
      DeliverLogsPermissionArn: !GetAtt LogRole.Arn
      LogGroupName: !Ref LogGroupPublicAccept
      ResourceId: !Ref PublicSubnetB
      ResourceType: Subnet
      TrafficType: ACCEPT
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  PublicSubnetCFlowLogAccept:
    Type: AWS::EC2::FlowLog
    Condition: ThirdZone
    Properties:
      DeliverLogsPermissionArn: !GetAtt LogRole.Arn
      LogGroupName: !Ref LogGroupPublicAccept
      ResourceId: !Ref PublicSubnetC
      ResourceType: Subnet
      TrafficType: ACCEPT
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  PrivateSubnetAFlowLogAccept:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt LogRole.Arn
      LogGroupName: !Ref LogGroupPrivateAccept
      ResourceId: !Ref PrivateSubnetA
      ResourceType: Subnet
      TrafficType: ACCEPT
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  PrivateSubnetBFlowLogAccept:
    Type: AWS::EC2::FlowLog
    Condition: SecondZone
    Properties:
      DeliverLogsPermissionArn: !GetAtt LogRole.Arn
      LogGroupName: !Ref LogGroupPrivateAccept
      ResourceId: !Ref PrivateSubnetB
      ResourceType: Subnet
      TrafficType: ACCEPT
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  PrivateSubnetCFlowLogAccept:
    Type: AWS::EC2::FlowLog
    Condition: ThirdZone
    Properties:
      DeliverLogsPermissionArn: !GetAtt LogRole.Arn
      LogGroupName: !Ref LogGroupPrivateAccept
      ResourceId: !Ref PrivateSubnetC
      ResourceType: Subnet
      TrafficType: ACCEPT
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  PrivateSubnetAFlowLogReject:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt LogRole.Arn
      LogGroupName: !Ref LogGroupPrivateReject
      ResourceId: !Ref PrivateSubnetA
      ResourceType: Subnet
      TrafficType: REJECT
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  PrivateSubnetBFlowLogReject:
    Type: AWS::EC2::FlowLog
    Condition: SecondZone
    Properties:
      DeliverLogsPermissionArn: !GetAtt LogRole.Arn
      LogGroupName: !Ref LogGroupPrivateReject
      ResourceId: !Ref PrivateSubnetB
      ResourceType: Subnet
      TrafficType: REJECT
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  PrivateSubnetCFlowLogReject:
    Type: AWS::EC2::FlowLog
    Condition: ThirdZone
    Properties:
      DeliverLogsPermissionArn: !GetAtt LogRole.Arn
      LogGroupName: !Ref LogGroupPrivateReject
      ResourceId: !Ref PrivateSubnetC
      ResourceType: Subnet
      TrafficType: REJECT
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  ################################################################################
  # NAT Security
  ################################################################################
  NatSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for NAT Instance
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetA]
        - Fn::If:
          - SecondZone
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetB]
          - !Ref AWS::NoValue
        - Fn::If:
          - ThirdZone
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetC]
          - !Ref AWS::NoValue
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetA]
        - Fn::If:
          - SecondZone
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetB]
          - !Ref AWS::NoValue
        - Fn::If:
          - ThirdZone
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetC]
          - !Ref AWS::NoValue
      Tags:
        - Fn::If:
          - AssignApp
          - Key: App
            Value: !Ref App
          - !Ref AWS::NoValue
        - Fn::If:
          - AssignOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue
        - Key: Name
          Value: NAT

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-nat
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:ModifyInstanceAttribute
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - Effect: Allow
                Action:
                  - ec2:CreateRoute
                  - ec2:ReplaceRoute
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:route-table/${PrivateRouteTableA}
                  - Fn::If:
                    - SecondZone
                    - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:route-table/${PrivateRouteTableB}
                    - !Ref AWS::NoValue
                  - Fn::If:
                    - ThirdZone
                    - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:route-table/${PrivateRouteTableC}
                    - !Ref AWS::NoValue

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  ################################################################################
  # NAT Instances
  ################################################################################
  UserDataHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap [Configuration, !Ref AWS::Region, Ami]
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref NatSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Fn::If:
                - AssignApp
                - Key: App
                  Value: !Ref App
                - !Ref AWS::NoValue
              - Fn::If:
                - AssignOwner
                - Key: Owner
                  Value: !Ref Owner
                - !Ref AWS::NoValue
              - Key: Name
                Value: on-aws-nat
              - Key: Role
                Value: nat
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              export instance=`curl http://169.254.169.254/latest/meta-data/instance-id`
              export az=`curl http://169.254.169.254/latest/meta-data/placement/availability-zone`
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region}
              /opt/aws/bin/cfn-signal '${UserDataHandle}'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_no_source_dest_check:
              command: !Sub |
                aws ec2 modify-instance-attribute --region ${AWS::Region} \
                  --instance-id $instance \
                  --no-source-dest-check
            02_replace_route_in_table_a:
              command: !Sub |
                if [[ $az == '${PrivateSubnetA.AvailabilityZone}' ]]
                then
                  aws ec2 create-route --region ${AWS::Region} \
                    --route-table-id ${PrivateRouteTableA} \
                    --instance-id $instance \
                    --destination-cidr-block 0.0.0.0/0
                  if [ $? -eq 0 ]
                  then
                    echo 'OK (route created)'
                  else
                    aws ec2 replace-route --region ${AWS::Region} \
                      --route-table-id ${PrivateRouteTableA} \
                      --instance-id $instance \
                      --destination-cidr-block 0.0.0.0/0
                    if [ $? -eq 0 ]
                    then
                      echo 'OK (route replaced)'
                    else
                      echo 'FAIL'
                    fi
                  fi
                fi
            03_replace_route_in_table_b:
              command:
                Fn::If:
                  - SecondZone
                  - !Sub |
                    if [[ $az == '${PrivateSubnetB.AvailabilityZone}' ]]
                    then
                      aws ec2 create-route --region ${AWS::Region} \
                        --route-table-id ${PrivateRouteTableB} \
                        --instance-id $instance \
                        --destination-cidr-block 0.0.0.0/0
                      if [ $? -eq 0 ]
                      then
                        echo 'OK (route created)'
                      else
                        aws ec2 replace-route --region ${AWS::Region} \
                          --route-table-id ${PrivateRouteTableB} \
                          --instance-id $instance \
                          --destination-cidr-block 0.0.0.0/0
                        if [ $? -eq 0 ]
                        then
                          echo 'OK (route replaced)'
                        else
                          echo 'FAIL'
                        fi
                      fi
                    fi
                  - echo 'SKIP'
            04_replace_route_in_table_c:
              command:
                Fn::If:
                  - ThirdZone
                  - !Sub |
                    if [[ $az == '${PrivateSubnetC.AvailabilityZone}' ]]
                    then
                      aws ec2 create-route --region ${AWS::Region} \
                        --route-table-id ${PrivateRouteTableC} \
                        --instance-id $instance \
                        --destination-cidr-block 0.0.0.0/0
                      if [ $? -eq 0 ]
                      then
                        echo 'OK (route created)'
                      else
                        aws ec2 replace-route --region ${AWS::Region} \
                          --route-table-id ${PrivateRouteTableC} \
                          --instance-id $instance \
                          --destination-cidr-block 0.0.0.0/0
                        if [ $? -eq 0 ]
                        then
                          echo 'OK (route replaced)'
                        else
                          echo 'FAIL'
                        fi
                      fi
                    fi
                  - echo 'SKIP'

  NatInstanceSpotFleetA:
    Type: AWS::EC2::SpotFleet
    DependsOn: PrivateRouteTableA
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role
        SpotPrice: !FindInMap [Configuration, Spot, MaxPrice]
        TargetCapacity: 1
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3a.nano
                SubnetId: !Ref PublicSubnetA
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3.nano
                SubnetId: !Ref PublicSubnetA

  NatInstanceSpotFleetB:
    Type: AWS::EC2::SpotFleet
    Condition: SecondZone
    DependsOn: PrivateRouteTableB
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role
        SpotPrice: !FindInMap [Configuration, Spot, MaxPrice]
        TargetCapacity: 1
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3a.nano
                SubnetId: !Ref PublicSubnetB
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3.nano
                SubnetId: !Ref PublicSubnetB

  NatInstanceSpotFleetC:
    Type: AWS::EC2::SpotFleet
    Condition: ThirdZone
    DependsOn: PrivateRouteTableC
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role
        SpotPrice: !FindInMap [Configuration, Spot, MaxPrice]
        TargetCapacity: 1
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3a.nano
                SubnetId: !Ref PublicSubnetC
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3.nano
                SubnetId: !Ref PublicSubnetC

  WaitUserData:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: LaunchTemplate
    Properties:
      Handle: !Ref UserDataHandle
      Timeout: 600
      Count: !Ref AvailabilityZonesCount

Outputs:
  VPC:
    Value: !Ref VPC

  NatSecurityGroup:
    Value: !Ref NatSecurityGroup

  PublicSubnets:
    Value:
      Fn::If:
        - ThirdZone
        - !Sub ${PublicSubnetA},${PublicSubnetB},${PublicSubnetC}
        - Fn::If:
          - SecondZone
          - !Sub ${PublicSubnetA},${PublicSubnetB}
          - !Ref PublicSubnetA

  PrivateSubnets:
    Value:
      Fn::If:
        - ThirdZone
        - !Sub ${PrivateSubnetA},${PrivateSubnetB},${PrivateSubnetC}
        - Fn::If:
          - SecondZone
          - !Sub ${PrivateSubnetA},${PrivateSubnetB}
          - !Ref PrivateSubnetA
