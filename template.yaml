Description:  >-
  VPC for On-AWS deployment. **WARNING** This template creates AWS VPC NAT Gateway.
  You will be billed for the AWS resources used if you create a stack from this template.

Parameters:
  Tag:
    Description: We tag all AWS resources for your convenience.
    Type: String
    
  Mode:
    Description: |
      Use Nat Gateway for production.
      Use Nat Instance for dev/test or small production.
    Type: String
    AllowedValues:
      - "NatGateway"
      - "NatInstance"
    Default: "NatGateway"
    
Conditions:
  UseNatGateway: !Equals [!Ref Mode, "NatGateway"]
  UseNatInstance: !Equals [!Ref Mode, "NatInstance"]
  
Mappings: 
  Configuration:
    us-east-1:
      Ami: ami-0d8b28f23a8c6709e
    eu-west-1:
      Ami: ami-06558a91dd7f36ac2
    Spot:
      InstanceType: t3a.micro
      MaxPrice: 0.01
    CidrBlock: 
      VPC: 10.192.0.0/16
      PublicSubnetA: 10.192.0.0/20
      PublicSubnetB: 10.192.16.0/20
      PublicSubnetC: 10.192.32.0/20
      PrivateSubnetA: 10.192.48.0/20
      PrivateSubnetB: 10.192.64.0/20
      PrivateSubnetC: 10.192.80.0/20

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [Configuration, CidrBlock, VPC]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Ref Tag

  ##########################################################################################
  # Public Subnets
  ##########################################################################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Ref Tag

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PublicSubnetA]
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: PublicSubnetA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PublicSubnetB]
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: PublicSubnetB

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PublicSubnetC]
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: PublicSubnetC
          
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: Public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC
      
  ################################################################################
  # NAT Gateway or NAT Instance
  # We are sharing single NAT across all provided subnets to reduce costs
  ################################################################################
  NatSecurityGroup:
    Condition: UseNatInstance
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for NAT Instance
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetA]
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetB]
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetC]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetA]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetB]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !FindInMap [Configuration, CidrBlock, PrivateSubnetC]
      Tags:
        - Key: App
          Value: !Ref Tag
          
  InstanceRole:
    Condition: UseNatInstance
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        
  InstanceProfile:
    Condition: UseNatInstance
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
        
  LaunchTemplate:
    Condition: UseNatInstance
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap [Configuration, !Ref AWS::Region, Ami]
        InstanceType: !FindInMap [Configuration, Spot, InstanceType]
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            MaxPrice: !FindInMap [Configuration, Spot, MaxPrice]
            
  NatInstance:
    Condition: UseNatInstance
    Type: AWS::EC2::Instance
    Properties:
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref NatSecurityGroup
          SubnetId: !Ref PublicSubnetA
      SourceDestCheck: false
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: 1
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: NAT
          
  EIP:
    Condition: UseNatGateway
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: App
          Value: !Ref Tag

  NatGateway:
    Condition: UseNatGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: App
          Value: !Ref Tag

  ########################################################################################
  # Private Subnets ########################################################################################
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PrivateSubnetA]
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: PrivateSubnetA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PrivateSubnetB]
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: PrivateSubnetB
          
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !FindInMap [Configuration, CidrBlock, PrivateSubnetC]
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: PrivateSubnetC
          
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: Private

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If
        - UseNatGateway
        - !Ref NatGateway
        - !Ref AWS::NoValue
      InstanceId: !If
        - UseNatInstance
        - !Ref NatInstance
        - !Ref AWS::NoValue

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB
      
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

Outputs:
  VPC:
    Value: !Ref VPC

  PublicSubnets:
    Value: !Sub ${PublicSubnetA},${PublicSubnetB},${PublicSubnetC}

  PrivateSubnets:
    Value: !Sub ${PrivateSubnetA},${PrivateSubnetB},${PrivateSubnetC}