Transform: AWS::LanguageExtensions
Description: VPC for On-AWS deployment.

Mappings:
  Configuration:
    us-east-1:
      Ami: ami-024cf76afbc833688
    us-west-2:
      Ami: ami-0218a6903ac31c61f
    ca-central-1:
      Ami: ami-0c863e000bf13d94b
    eu-west-1:
      Ami: ami-0137cee1a6fb4f763
    Spot:
      MaxPrice: 0.003
    VPC:
      CidrBlock: 10.192.0.0/16
    PublicSubnet:
      A: 10.192.0.0/20
      B: 10.192.16.0/20
      C: 10.192.32.0/20
    PrivateSubnet:
      A: 10.192.48.0/20
      B: 10.192.64.0/20
      C: 10.192.80.0/20
    AZ:
      A: 0
      B: 1
      C: 2
    Logs:
      RetentionInDays: 30

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [Configuration, VPC, CidrBlock]
      EnableDnsSupport: true
      EnableDnsHostnames: true

  LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-vpc-flow-log
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /on-aws/vpc/log/${VPC}
      RetentionInDays: !FindInMap [ Configuration, Logs, RetentionInDays ]

  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt LogRole.Arn
      LogGroupName: !Ref LogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Fn::ForEach::Subnet:
    - Letter
    - [ A, B, C ]
    - PublicSubnet${Letter}:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select
            - !FindInMap [Configuration, AZ, !Ref Letter]
            - !GetAZs
          CidrBlock: !FindInMap [Configuration, PublicSubnet, !Ref Letter]
          Tags:
            - Key: Name
              Value: PublicSubnet${Letter}

      PublicSubnet${Letter}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref
            Fn::Sub: PublicRouteTable
          SubnetId: !Ref
            Fn::Sub: PublicSubnet${Letter}

      PrivateRouteTable${Letter}:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: Private${Letter}

      PrivateSubnet${Letter}:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select
            - !FindInMap [ Configuration, AZ, !Ref Letter ]
            - !GetAZs
          CidrBlock: !FindInMap [ Configuration, PrivateSubnet, !Ref Letter ]
          Tags:
            - Key: Name
              Value: PrivateSubnet${Letter}

      PrivateSubnet${Letter}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref
            Fn::Sub: PrivateRouteTable${Letter}
          SubnetId: !Ref
            Fn::Sub: PrivateSubnet${Letter}

  NatSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for NAT Instance
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !FindInMap [ Configuration, PrivateSubnet, A ]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !FindInMap [ Configuration, PrivateSubnet, B ]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !FindInMap [ Configuration, PrivateSubnet, C ]
      Tags:
        - Key: Name
          Value: NAT

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-nat
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:ModifyInstanceAttribute
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - Effect: Allow
                Action:
                  - ec2:CreateRoute
                  - ec2:ReplaceRoute
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:route-table/${PrivateRouteTableA}
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:route-table/${PrivateRouteTableB}
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:route-table/${PrivateRouteTableC}

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap [ Configuration, !Ref AWS::Region, Ami ]
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref NatSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: on-aws-nat
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              export instance=`curl http://169.254.169.254/latest/meta-data/instance-id`
              export az=`curl http://169.254.169.254/latest/meta-data/placement/availability-zone`
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplate --region ${AWS::Region}
              /opt/aws/bin/cfn-signal '${UserDataHandle}'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_no_source_dest_check:
              command: !Sub |
                aws ec2 modify-instance-attribute --region ${AWS::Region} \
                  --instance-id $instance \
                  --no-source-dest-check
            02_replace_route_in_table_a:
              command: !Sub |
                if [[ $az == '${PrivateSubnetA.AvailabilityZone}' ]]
                then
                  aws ec2 create-route --region ${AWS::Region} \
                    --route-table-id ${PrivateRouteTableA} \
                    --instance-id $instance \
                    --destination-cidr-block 0.0.0.0/0
                  if [ $? -eq 0 ]
                  then
                    echo 'OK (route created)'
                  else
                    aws ec2 replace-route --region ${AWS::Region} \
                      --route-table-id ${PrivateRouteTableA} \
                      --instance-id $instance \
                      --destination-cidr-block 0.0.0.0/0
                    if [ $? -eq 0 ]
                    then
                      echo 'OK (route replaced)'
                    else
                      echo 'FAIL'
                    fi
                  fi
                fi
            03_replace_route_in_table_b:
              command: !Sub |
                if [[ $az == '${PrivateSubnetB.AvailabilityZone}' ]]
                then
                  aws ec2 create-route --region ${AWS::Region} \
                    --route-table-id ${PrivateRouteTableB} \
                    --instance-id $instance \
                    --destination-cidr-block 0.0.0.0/0
                  if [ $? -eq 0 ]
                  then
                    echo 'OK (route created)'
                  else
                    aws ec2 replace-route --region ${AWS::Region} \
                      --route-table-id ${PrivateRouteTableB} \
                      --instance-id $instance \
                      --destination-cidr-block 0.0.0.0/0
                    if [ $? -eq 0 ]
                    then
                      echo 'OK (route replaced)'
                    else
                      echo 'FAIL'
                    fi
                  fi
                fi
            04_replace_route_in_table_c:
              command: !Sub |
                if [[ $az == '${PrivateSubnetC.AvailabilityZone}' ]]
                then
                  aws ec2 create-route --region ${AWS::Region} \
                    --route-table-id ${PrivateRouteTableC} \
                    --instance-id $instance \
                    --destination-cidr-block 0.0.0.0/0
                  if [ $? -eq 0 ]
                  then
                    echo 'OK (route created)'
                  else
                    aws ec2 replace-route --region ${AWS::Region} \
                      --route-table-id ${PrivateRouteTableC} \
                      --instance-id $instance \
                      --destination-cidr-block 0.0.0.0/0
                    if [ $? -eq 0 ]
                    then
                      echo 'OK (route replaced)'
                    else
                      echo 'FAIL'
                    fi
                  fi
                fi

  Fn::ForEach::Instance:
    - Letter
    - [ A, B, C ]
    - NatInstanceSpotFleet${Letter}:
        Type: AWS::EC2::EC2Fleet
        DependsOn: !Sub PrivateRouteTable${Letter}
        Properties:
          ExcessCapacityTerminationPolicy: termination
          LaunchTemplateConfigs:
            - LaunchTemplateSpecification:
                LaunchTemplateId: !Ref LaunchTemplate
                Version: !GetAtt LaunchTemplate.LatestVersionNumber
              Overrides:
                - InstanceType: t3a.nano
                  SubnetId: !Ref
                    Fn::Sub: PublicSubnet${Letter}
            - LaunchTemplateSpecification:
                LaunchTemplateId: !Ref LaunchTemplate
                Version: !GetAtt LaunchTemplate.LatestVersionNumber
              Overrides:
                - InstanceType: t3.nano
                  SubnetId: !Ref
                    Fn::Sub: PublicSubnet${Letter}
          ReplaceUnhealthyInstances: true
          SpotOptions:
            AllocationStrategy: capacityOptimized
            MaintenanceStrategies:
              CapacityRebalance:
                ReplacementStrategy: launch-before-terminate
                TerminationDelay: 120
          TargetCapacitySpecification:
            DefaultTargetCapacityType: spot
            SpotTargetCapacity: 1
            TotalTargetCapacity: 1

  UserDataHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitUserData:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: LaunchTemplate
    Properties:
      Handle: !Ref UserDataHandle
      Timeout: 600
      Count: 3

Outputs:
  VPC:
    Value: !Ref VPC

  NatSecurityGroup:
    Value: !Ref NatSecurityGroup

  PublicSubnets:
    Value: !Sub ${PublicSubnetA},${PublicSubnetB},${PublicSubnetC}

  PrivateSubnets:
    Value: !Sub ${PrivateSubnetA},${PrivateSubnetB},${PrivateSubnetC}
